/* Copyright 2022, Contributors To LensorOS.
* All rights reserved.
*
* This file is part of LensorOS.
*
* LensorOS is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* LensorOS is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with LensorOS. If not, see <https://www.gnu.org/licenses
 */

#ifndef LENSOROS_MEMORY_HH
#define LENSOROS_MEMORY_HH

#include <type_traits>

namespace std {

template <typename _T>
constexpr enable_if<is_object_v<_T>, _T*> addressof(_T& __val) noexcept {
    return reinterpret_cast<_T*>(
        &const_cast<char&>(reinterpret_cast<const volatile char&>(__val))
    );
}

template <typename _T>
constexpr enable_if<!is_object_v<_T>, _T*> addressof(_T& __val) noexcept {
    return &__val;
}

template <typename _T>
const _T* addressof(const _T&&) = delete;

}


#endif // LENSOROS_MEMORY_HH
