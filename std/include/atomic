/* Copyright 2022, Contributors To LensorOS.
* All rights reserved.
*
* This file is part of LensorOS.
*
* LensorOS is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* LensorOS is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with LensorOS. If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef _LENSOR_OS_ATOMIC
#define _LENSOR_OS_ATOMIC

#include "type_traits"

namespace std {
template <typename _T>
struct atomic {
    _T __value;
    constexpr atomic() noexcept {}
    constexpr atomic(_T value) noexcept : __value(value) {}
};

template <typename _T>
bool atomic_compare_exchange_weak(volatile atomic<_T>* ptr, _T* expected, _T desired) noexcept {
    return __atomic_compare_exchange(
        &ptr->__value,
        expected,
        desired,
        true,
        __ATOMIC_SEQ_CST,
        __ATOMIC_SEQ_CST
    );
}

template <typename _T>
_T atomic_fetch_add(volatile atomic<_T>* ptr, _T value) noexcept {
    return __atomic_fetch_add(&ptr->__value, value, __ATOMIC_SEQ_CST);
}

template <typename _T>
_T atomic_load(volatile atomic<_T>* ptr) noexcept {
    return __atomic_load_n(&ptr->__value, __ATOMIC_SEQ_CST);
}

} // namespace std

#endif // _LENSOR_OS_ATOMIC
